package client;

//Удалось запустить несколько экземпляров программы: Ни какой Maven не нужен, чтобы несколько раз запускать программу, надо всего-лишь в Меню запуска программы Run/Debug Configuration добавить опцию Allow multiple instances
//Прописано событие, которое происходит при нажатии крестика закрытия окна JavaFX, корректно пользователь выходи из чата
//Разобрался и исправил собственную ошибку в получении Ника пользователя при авторизации в чате
//Исправил ошибку, если клиент набирает /w ник_пользователя и далее не набирает ни какого сообщения
//Создана MySQL таблица с пользователями, которая хранится на удалённом сервере. Когда серверная часть программы стартует, то список пользователей загружается в BaseAuthService.entries и далее работаем с этим списком
//В MySQL таблице с логинами/паролями пользователей на удалённом сервере все операции с пользователем будем проводить по уникальному полю users.id_klienta, т.к. Ник клиента может быть не уникальным. Логин конечно должен быть уникальным, но один и тот же логин может быть удалён, потом добавлен, а поле users.id_klienta всегда будет уникальным
//В server.ClientHandler дописана корректная обработка ошибок, когда пользователь не может подключиться к серверу(вводит не правильный логин/пароль) и когда пользователь сбрасывает соединение(выходит из программы), сервер при этом выдаёт в консоль соответствующие сообщения
//Добавлена корректная обработка событий при нажатии на кнопку Войти в чат:
//Если сервер не запущен, то в чат печатается сообщение: Сервер не доступен. Попробуйте авторизоваться позже.
//Если пользователь ввёл не верный логин/пароль, то показывается окошко с сообщением: Вы ввели не верный логин или пароль. Введите логин/пароль и попробуйте ещё разик.
//Написан Метод client.Controller.exitIvanChat, который запускаем, когда надо выйти из программы. Закрывает соединение с базой данных, останавливает потоки и делает всё, чтобы не осталось следов от работы программы
//в server.ClientHandler.closeConnection дописана проверка на то, что Ник клиента не пустой. Это нужно для того, чтобы не выдавать не нужные сообщения авторизованным пользователям, когда кто-то другой НЕ успешно пытается авторизоваться
//в server.MyServer.subscribe и в server.MyServer.unsubscribe дописана проверка на то, что количество подключённых/отключённых клиентов изменилась/не изменилась. Это нужно для того, чтобы не выдавать не нужные сообщения авторизованным пользователям, когда кто-то другой НЕ успешно пытается авторизоваться
//в client.Controller.doChangeNik Нажатие кнопки <-- сменить Ник дописана проверка на то, что Ник изменяется(т.е. пользователь ввёл новый Ник, отличный от старого). Если не изменяется Ник, то выдаём сообщение об ошибке
//Сделано: Когда пользователь изменяет свой Ник, то его новый Ник записывается в таблицу users на сервер и через сообщение передаётся на server и в server.ClientHandler.readMessages мы получаем новый Ник клиента и изменяем его для данного клиента и сразу начинаем использовать, т.е. все новые сообщения от данного клиента идут под новым Ником
//Добавлено сохранение чата в локальной истории в текстовый файл на устройстве клиента, при подключении клиента(когда он успешно авторизовался), выполняется client.Controller.loadHistoryMessage и создаётся файл history.txt для каждого клиента, если он не был создан. В этот файл записывается история чата
//history.txt - если файл существует, то из него в окошко чата mainChat считывают последний 100 строк из файла history.txt

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.*;
import javafx.stage.*;

public class ClientApp extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {

        Parent root = FXMLLoader.load(getClass().getResource("client.fxml"));
        primaryStage.setTitle("ИванЧат 2021");
        primaryStage.setScene(new Scene(root));
        primaryStage.setResizable(false);//Не разрешаем масштабировать
        primaryStage.show();

        //прописываем событие, которое срабатывает при закрытии онка - нажатие на крестик закрытия окна
        primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent event) {
                Controller.exitIvanChat();//Выходим из программы
            }
        });
    }

    public static void Main(String[] args) {
        launch(args);
    }



/*    //Класс, который всё запускает
    public class ServerApp {
        public static void main(String[] args) {
            new MyServer();//создание экземпляра класса MyServer
        }*/
/*    @Override

    public void stop(){
        System.out.println("Приложение закрывается!!!");
        //Здесь Вы можете прописать все действия при закрытии Вашего приложения.
    }*/
}
